2022-02-18  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.c (cp_parser_omp_construct): Move handling of
	PRAGMA_OMP_METADIRECTIVE from here...
	(cp_parser_pragma): ...to here.
	(analyze_metadirective_body): Check that the bracket
	nesting level is also zero before stopping the adding of tokens on
	encountering a close brace.
	(cp_parser_omp_metadirective): Modify function signature and update.
	Do not assert on remaining tokens if there has been a parse error.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.c (omp_target_device_selectors): New.
	(cp_parser_omp_context_selector): Accept 'target_device' selector set.
	Treat 'device_num' selector as expression.
	(cp_parser_omp_context_selector_specification): Handle 'target_device'
	selector set.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.c (cp_parser_skip_to_end_of_statement): Revert.
	(cp_parser_skip_to_end_of_block_or_statement): Track bracket depth
	separately from nesting depth.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.c (cp_parser_skip_to_end_of_statement): Handle parentheses.
	(cp_parser_skip_to_end_of_block_or_statement): Likewise.
	(cp_parser_omp_context_selector): Add extra argument.  Allow
	non-constant expressions.
	(cp_parser_omp_context_selector_specification): Add extra argument and
	propagate to cp_parser_omp_context_selector.
	(analyze_metadirective_body): New.
	(cp_parser_omp_metadirective): New.
	(cp_parser_omp_construct): Handle PRAGMA_OMP_METADIRECTIVE.
	(cp_parser_pragma): Handle PRAGMA_OMP_METADIRECTIVE.

2021-12-22  Andrew Stubbs  <ams@codesourcery.com>

	* parser.c (cp_parser_omp_requires): Don't "sorry" dynamic_allocators.

2021-10-27  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-27  Jakub Jelinek  <jakub@redhat.com>

	PR c++/102854
	* semantics.c (handle_omp_for_class_iterator,
	finish_omp_for): Adjust c_omp_check_loop_iv_exprs caller.

2021-10-15  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* decl.c (omp_declare_variant_finalize_one): Change call from
	c_omp_mark_declare_variant to omp_mark_declare_variant.
	* parser.c (cp_finish_omp_declare_variant): Change call from
	c_omp_check_context_selector to omp_check_context_selector.

2021-10-09  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-09  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_structured_block): Remove disallow_omp_attrs
	argument.
	(cp_parser_omp_structured_block_sequence): New function.
	(cp_parser_omp_scan_loop_body): Use it.
	(cp_parser_omp_sections_scope): Likewise.

2021-10-08  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-08  Jakub Jelinek  <jakub@redhat.com>

	PR c++/102640
	* parser.c (handle_omp_declare_target_clause): New function.
	(cp_parser_omp_declare_target): Use it.

2021-10-01  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-01  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_order): Set
	OMP_CLAUSE_ORDER_REPRODUCIBLE for explicit reproducible: modifier.

2021-09-23  Tobias Burnus  <tobias@codesourcery.com>

	2021-09-23  Jakub Jelinek  <jakub@redhat.com>

	PR c++/102413
	* parser.c (cp_parser_omp_directive_args): Diagnose if omp::directive
	is not followed by a balanced token sequence starting with open paren.

2021-09-23  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-12  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_block_declaration): Call
	cp_parser_using_directive for C++11 attributes followed by
	using namespace tokens.
	(cp_parser_using_directive): Parse C++11 attributes at the start
	of the directive rather than at the end, only parse GNU attributes
	at the end.

2021-09-22  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-09-22  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_allocate): Parse allocate clause
	modifiers.
	* semantics.c (finish_omp_clauses) <OMP_CLAUSE_ALLOCATE>: Perform
	semantic analysis of OMP_CLAUSE_ALLOCATE_ALIGN.
	* pt.c (tsubst_omp_clauses) <case OMP_CLAUSE_ALLOCATE>: Handle
	also OMP_CLAUSE_ALLOCATE_ALIGN.

2021-09-20  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-09-18  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_order): Parse unconstrained
	and reproducible modifiers.
	(OMP_DISTRIBUTE_CLAUSE_MASK): Add order clause.

2021-09-20  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-09-18  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_default): Handle private and
	firstprivate arguments, adjust diagnostics on unknown argument.
	* cp-gimplify.c (cxx_omp_finish_clause): Handle OMP_CLAUSE_PRIVATE.

2021-09-17  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-09-17  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (finish_omp_atomic): Add r and weak arguments.
	* parser.c (cp_parser_omp_atomic): Update function comment for
	OpenMP 5.1 atomics, parse OpenMP 5.1 atomics and fail, compare and
	weak clauses.
	* semantics.c (finish_omp_atomic): Add r and weak arguments, handle
	them, handle COND_EXPRs.
	* pt.c (tsubst_expr): Adjust for COND_EXPR forms that
	finish_omp_atomic can now produce.

2021-09-13  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-09-10  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_atomic): Allow acq_rel on atomic read/write
	and acq_rel/acquire clauses on update.
	* semantics.c (finish_omp_atomic): Adjust c_finish_omp_atomic caller.

2021-08-23  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-23  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_num_tasks,
	cp_parser_omp_clause_grainsize): Parse the optional strict: modifier.

2021-08-20  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-20  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_handle_statement_omp_attributes): Determine if
	PRAGMA_OMP_ERROR directive is C_OMP_DIR_STANDALONE.
	(cp_parser_omp_error): New function.
	(cp_parser_pragma): Handle PRAGMA_OMP_ERROR.

2021-08-20  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-20  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_depend_sink): Reject spurious
	comma at the end of list.  Don't parse closing paren here...
	(cp_parser_omp_clause_depend): ... but here instead.

2021-08-19  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-19  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_requires): Don't call cp_lexer_nth_token_is
	and optionally consume token if current token is CPP_EOF,
	CPP_PRAGMA_EOL or CPP_CLOSE_PAREN.

2021-08-19  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-19  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_nothing): Use cp_parser_require_pragma_eol
	instead of cp_parser_skip_to_pragma_eol.

2021-08-18  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-18  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_nothing): New function.
	(cp_parser_pragma): Handle PRAGMA_OMP_NOTHING.

2021-08-18  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-18  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_ordered): Return true instead of
	false after emitting errors that the directive is not allowed in
	pragma_stmt context.
	(cp_parser_omp_target_update): Likewise.
	(cp_parser_omp_cancellation_point): Change return type from void to
	bool, return false if the directive should be ignored in pragma_stmt
	contexts.
	(cp_parser_omp_target_enter_data, cp_parser_omp_target_exit_data):
	Change return type from tree to bool, return false if the
	directive should be ignored in pragma_stmt contexts.
	(cp_parser_omp_target): Adjust callers of cp_parser_omp_target_*_data,
	return their result directly.
	(cp_parser_pragma): For PRAGMA_OMP_CANCELLATION_POINT return what
	cp_parser_omp_cancellation_point returned.  Return true instead of
	false after emitting errors that the directive is not allowed in
	pragma_stmt context.

2021-08-17  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-17  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (OMP_SCOPE_CLAUSE_MASK): Define.
	(cp_parser_omp_scope): New function.
	(cp_parser_omp_construct, cp_parser_pragma): Handle PRAGMA_OMP_SCOPE.
	* pt.c (tsubst_expr): Handle OMP_SCOPE.

2021-08-16  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-12  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_name): Parse filter clause name.
	(cp_parser_omp_clause_filter): New function.
	(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_FILTER.
	(OMP_MASKED_CLAUSE_MASK): Define.
	(cp_parser_omp_masked): New function.
	(cp_parser_omp_parallel): Handle parallel masked.
	(cp_parser_omp_construct, cp_parser_pragma): Handle PRAGMA_OMP_MASKED.
	* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_FILTER.
	* pt.c (tsubst_omp_clauses): Likewise.
	(tsubst_expr): Handle OMP_MASKED.

2021-08-16  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-12  Tobias Burnus  <tobias@codesourcery.com>

	* parser.c (cp_parser_omp_clause_proc_bind): Accept
	'primary' as alias for 'master'.

2021-08-12  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-12  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (omp_declare_target_attr): New type.
	(struct saved_scope): Change type of omp_declare_target_attribute
	from int to vec<omp_declare_target_attr, va_gc> * and move it.
	* parser.c (cp_parser_omp_declare_target): Instead of
	incrementing scope_chain->omp_declare_target_attribute, push
	a struct containing parser->lexer->in_omp_attribute_pragma to
	the vector.
	(cp_parser_omp_end_declare_target): Instead of decrementing
	scope_chain->omp_declare_target_attribute, pop a structure
	from it.  Diagnose mismatching declare target vs.
	end declare target syntax.
	* semantics.c (finish_translation_unit): Use vec_safe_length
	and vec_safe_truncate on scope_chain->omp_declare_target_attributes.
	* decl2.c (cplus_decl_attributes): Use vec_safe_length
	on scope_chain->omp_declare_target_attributes.

2021-08-12  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-12  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_lambda_body): Add temp overrides
	for parser->{omp_declare_simd,oacc_routine,omp_attrs_forbidden_p}.
	(cp_parser_statement): Restore parser->omp_attrs_forbidden_p for
	cp_parser_declaration_statement.
	(cp_parser_default_argument): Add temp override for
	parser->omp_attrs_forbidden_p.
	(cp_parser_late_parsing_omp_declare_simd): Diagnose declare simd
	or declare variant in attribute syntax on a declaration immediately
	following an OpenMP construct in pragma syntax.

	* g++.dg/gomp/attrs-11.C: Add new tests.

2021-08-12  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-04  Jakub Jelinek  <jakub@redhat.com>

	PR c++/101759
	* parser.c (cp_parser_default_argument): Temporarily override
	parser->omp_declare_simd and parser->oacc_routine to NULL.

2021-08-12  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-12  Jakub Jelinek  <jakub@redhat.com>

	* name-lookup.c (finish_using_directive): Diagnose omp::directive
	or omp::sequence attributes on using-directive.

2021-08-10  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-10  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_member_declaration): Move odsd declaration
	before cp_parser_using_declaration call to avoid errors with
	GCC 4.8 to 6.

2021-08-10  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-10  Jakub Jelinek  <jakub@redhat.com>

	* parser.h (struct cp_omp_declare_simd_data): Remove
	in_omp_attribute_pragma and clauses members, add loc and attribs.
	(struct cp_oacc_routine_data): Remove loc member, add clauses
	member.
	* parser.c (cp_finalize_omp_declare_simd): New function.
	(cp_parser_handle_statement_omp_attributes): Mention in
	function comment the function is used also for
	attribute-declaration.
	(cp_parser_handle_directive_omp_attributes): New function.
	(cp_parser_statement): Don't call
	cp_parser_handle_statement_omp_attributes if statement doesn't
	have attribute-specifier-seq at the beginning at all or if
	if those attributes don't appertain to the statement.
	(cp_parser_simple_declaration): Call
	cp_parser_handle_directive_omp_attributes and
	cp_finalize_omp_declare_simd.
	(cp_parser_explicit_instantiation): Likewise.
	(cp_parser_init_declarator): Initialize prefix_attributes
	only after parsing declarators.
	(cp_parser_direct_declarator): Call
	cp_parser_handle_directive_omp_attributes and
	cp_finalize_omp_declare_simd.
	(cp_parser_member_declaration): Likewise.
	(cp_parser_single_declaration): Likewise.
	(cp_parser_omp_declare_simd): Don't initialize
	data.in_omp_attribute_pragma, instead initialize
	data.attribs[0] and data.attribs[1].
	(cp_finish_omp_declare_variant): Remove
	in_omp_attribute_pragma argument, instead use
	parser->lexer->in_omp_attribute_pragma.
	(cp_parser_late_parsing_omp_declare_simd): Adjust
	cp_finish_omp_declare_variant caller.  Handle attribute-syntax
	declare simd/variant.

2021-08-01  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-31  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_declaration): Handle OpenMP directives
	in attribute-declaration.

2021-07-30  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-30  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_statement): Rollback attributes not just
	when std_attrs is non-NULL, but whenever
	cp_parser_std_attribute_spec_seq parsed any tokens.

2021-07-30  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-30  Jakub Jelinek  <jakub@redhat.com>

	PR c++/101582
	* parser.c (cp_parser_skip_std_attribute_spec_seq): Add a forward
	declaration.
	(cp_parser_declaration): Parse empty-declaration and
	attribute-declaration.
	(cp_parser_toplevel_declaration): Don't parse empty-declaration here.

2021-07-26  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-26  Jakub Jelinek  <jakub@redhat.com>

	* parser.h (struct cp_lexer): Add orphan_p member.
	* parser.c (cp_parser_statement): Don't change in_omp_attribute_pragma
	upon restart from CPP_PRAGMA handling.  Fix up condition when a lexer
	should be destroyed and adjust saved_tokens if it records tokens from
	the to be destroyed lexer.
	(cp_parser_omp_section_scan): New function.
	(cp_parser_omp_scan_loop_body): Use it.  If
	parser->lexer->in_omp_attribute_pragma, allow optional comma
	after scan.
	(cp_parser_omp_sections_scope): Use cp_parser_omp_section_scan.

2021-07-23  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-23  Jakub Jelinek  <jakub@redhat.com>

	* parser.h (struct cp_parser): Add omp_attrs_forbidden_p member.
	* parser.c (cp_parser_handle_statement_omp_attributes): Diagnose
	mixing of attribute and pragma syntax directives when seeing
	omp::directive if parser->omp_attrs_forbidden_p or if attribute syntax
	directives are followed by OpenMP pragma.
	(cp_parser_statement): Clear parser->omp_attrs_forbidden_p after
	the cp_parser_handle_statement_omp_attributes call.
	(cp_parser_omp_structured_block): Add disallow_omp_attrs argument,
	if true, set parser->omp_attrs_forbidden_p.
	(cp_parser_omp_scan_loop_body, cp_parser_omp_sections_scope): Pass
	false as disallow_omp_attrs to cp_parser_omp_structured_block.
	(cp_parser_omp_parallel, cp_parser_omp_task): Set
	parser->omp_attrs_forbidden_p.

2021-07-21  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-21  Jakub Jelinek  <jakub@redhat.com>

	PR middle-end/101535
	* gimplify.c (omp_check_private): Properly skip ORT_TARGET_DATA
	contexts in which decl isn't privatized and for ORT_TARGET return
	false if decl is mapped.

2021-07-21  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-21  Jakub Jelinek  <jakub@redhat.com>

	PR c++/101516
	* semantics.c (finish_omp_reduction_clause): Also call
	complete_type_or_else and return true if it fails.

2021-07-19  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-02  Jakub Jelinek  <jakub@redhat.com>

	* parser.h (struct cp_lexer): Add in_omp_attribute_pragma member.
	(struct cp_omp_declare_simd_data): Likewise.
	* cp-tree.h (enum cp_tree_index): Add CPTI_OMP_IDENTIFIER.
	(omp_identifier): Define.
	* parser.c (cp_parser_skip_to_pragma_eol): Handle
	in_omp_attribute_pragma CPP_PRAGMA_EOL followed by CPP_EOF.
	(cp_parser_require_pragma_eol): Likewise.
	(struct cp_omp_attribute_data): New type.
	(cp_parser_handle_statement_omp_attributes): New function.
	(cp_parser_statement): Handle OpenMP directives in statement's
	attribute-specifier-seq.
	(cp_parser_omp_directive_args, cp_parser_omp_sequence_args): New
	functions.
	(cp_parser_std_attribute): Handle omp::directive and omp::sequence
	attributes.
	(cp_parser_omp_all_clauses): If in_omp_attribute_pragma, allow
	a comma also before the first clause.
	(cp_parser_omp_allocate): Likewise.
	(cp_parser_omp_atomic): Likewise.
	(cp_parser_omp_depobj): Likewise.
	(cp_parser_omp_flush): Likewise.
	(cp_parser_omp_ordered): Likewise.
	(cp_parser_omp_declare_simd): Save in_omp_attribute_pragma
	into struct cp_omp_declare_simd_data.
	(cp_finish_omp_declare_variant): Add in_omp_attribute_pragma
	argument.  If set, allow a comma also before match clause.
	(cp_parser_late_parsing_omp_declare_simd): If in_omp_attribute_pragma,
	allow a comma also before the first clause.  Adjust
	cp_finish_omp_declare_variant caller.
	(cp_parser_omp_declare_target): If in_omp_attribute_pragma, allow
	a comma also before the first clause.
	(cp_parser_omp_declare_reduction_exprs): Likewise.
	(cp_parser_omp_requires): Likewise.
	* decl.c (initialize_predefined_identifiers): Initialize
	omp_identifier.
	* decl2.c (cplus_decl_attributes): Reject omp::directive and
	omp::sequence attributes.

2021-07-19  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-02  Jakub Jelinek  <jakub@redhat.com>

	PR c/101297
	* parser.c (cp_parser_omp_atomic): Consume comma only if it
	appears before a CPP_NAME.

2021-06-15  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-06-14  Tobias Burnus  <tobias@codesourcery.com>

	PR c/100913
	* parser.c (cp_parser_omp_clause_affinity): No need to set iterator
	var in the error case.

2021-06-04  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-06-04  Jakub Jelinek  <jakub@redhat.com>

	PR c++/100872
	* name-lookup.c (maybe_save_operator_binding): Add op_attr after all
	ATTR_IS_DEPENDENT attributes in the DECL_ATTRIBUTES list rather than
	to the start.

2021-06-04  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-06-03  Jakub Jelinek  <jakub@redhat.com>

	PR c++/100859
	* semantics.c (handle_omp_array_sections_1): For
	OMP_CLAUSE_{AFFINITY,DEPEND} handle FIELD_DECL base using
	finish_non_static_data_member and allow this as base.
	(finish_omp_clauses): Move OMP_CLAUSE_AFFINITY
	after depend only cases.  Let this be diagnosed by !lvalue_p
	case for OMP_CLAUSE_{AFFINITY,DEPEND} and remove useless
	assert.
	* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_AFFINITY.

2021-05-28  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-28  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (handle_omp_array_sections): Copy
	OMP_CLAUSE_MAP_IMPLICIT.
	(finish_omp_clauses): Move not just OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT
	marked clauses last, but also OMP_CLAUSE_MAP_IMPLICIT.  Add
	map_firstprivate_head bitmap, set it for GOMP_MAP_FIRSTPRIVATE_POINTER
	maps and silently remove OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT if it is
	present too.  For OMP_CLAUSE_MAP_IMPLICIT silently remove the clause
	if present in map_head, map_field_head or map_firstprivate_head
	bitmaps.

2021-05-28  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-28  Tobias Burnus  <tobias@codesourcery.com>

	* parser.c (cp_parser_omp_clause_affinity): New.
	(cp_parser_omp_clause_name, cp_parser_omp_var_list_no_open,
	cp_parser_omp_all_clauses, OMP_TASK_CLAUSE_MASK): Handle affinity
	clause.
	* semantics.c (handle_omp_array_sections_1, handle_omp_array_sections,
	finish_omp_clauses): Likewise.

2021-05-23  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-21  Jakub Jelinek  <jakub@redhat.com>

	PR middle-end/99928
	* semantics.c (finish_omp_clauses): Move firstprivate clauses with
	OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT to the end of the chain.  Don't error
	if a decl is mentioned both in map clause and in such firstprivate
	clause unless OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET is also set.

2021-05-19  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-19  Jakub Jelinek  <jakub@redhat.com>

	PR middle-end/99928
	* parser.c (cp_parser_omp_master): Set OMP_MASTER_COMBINED on
	master when combined with taskloop.
	(cp_parser_omp_parallel): Don't set OMP_PARALLEL_COMBINED on
	parallel master when not combined with taskloop.

2021-05-14  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-12  Marcel Vollweiler  <marcel@codesourcery.com>

	* parser.c (cp_parser_omp_clause_map): Support map-type-modifier
	'close'.

2021-05-14  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-04  Tobias Burnus  <tobias@codesourcery.com>

	* semantics.c (finish_omp_reduction_clause): Accept float + complex
	for || and && reductions.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Add a "combined" flag for "acc kernels loop" etc directives.

	* parser.c (cp_parser_oacc_loop): Set OACC_LOOP_COMBINED.

2020-03-31  Sandra Loosemore  <sandra@codesourcery.com>

	* semantics.c (handle_omp_array_sections_1): Call STRIP_NOPS
	on length and low_bound;
	(handle_omp_array_sections): Likewise.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>

	* decl.c (cp_unwrap_for_init): New.
	(finish_function): Call c_oacc_annotate_loops_in_kernels_regions.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Julian Brown  <julian@codesourcery.com>

	* parser.c (cp_parser_omp_var_list_no_open):  New c_omp_region_type
	argument.  Use it to specialize handling of OMP_CLAUSE_REDUCTION for
	OpenACC.
	(cp_parser_omp_var_list): Add c_omp_region_type argument. Update call
	to cp_parser_omp_var_list_parens.
	(cp_parser_oacc_data_clause): Update call to cp_parser_omp_var_list.
	(cp_parser_omp_clause_reduction): Change is_omp boolean parameter to
	c_omp_region_type.  Update call to cp_parser_omp_var_list_no_open.
	(cp_parser_oacc_all_clauses): Update call to
	cp_parser_omp_clause_reduction.
	(cp_parser_omp_all_clauses): Likewise.
	* semantics.c (finish_omp_reduction_clause): Add c_omp_region_type
	argument.  Suppress user-defined reduction error for OpenACC.
	(finish_omp_clauses): Emit an error on orphan OpenACC gang reductions.

2018-10-02  Thomas Schwinge  <thomas@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_omp_clause_name): Handle "nohost".
	(cp_parser_oacc_all_clauses): Handle PRAGMA_OACC_CLAUSE_NOHOST,
	(cp_parser_oacc_routine): Update.
	* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_NOHOST.
	* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_NOHOST.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739
	* semantics.c (handle_omp_array_sections_1): Add 'bool &non_contiguous'
	parameter, adjust recursive call site, add cases for allowing
	pointer based multi-dimensional arrays for OpenACC.
	(handle_omp_array_sections): Adjust handle_omp_array_sections_1 call,
	handle non-contiguous case to create dynamic array map.

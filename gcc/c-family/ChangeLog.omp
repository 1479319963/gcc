2022-02-27  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-11-15  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.c (c_omp_split_clauses) <case OMP_CLAUSE_THREAD_LIMIT>:
	Duplicate to both OMP_TARGET and OMP_TEAMS.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-omp.c (c_omp_expand_metadirective_r): New.
	(c_omp_expand_metadirective): New.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-common.h (enum c_omp_directive_kind): Add C_OMP_DIR_META.
	(c_omp_expand_metadirective): New prototype.
	* c-gimplify.c (genericize_omp_metadirective_stmt): New.
	(c_genericize_control_stmt): Handle OMP_METADIRECTIVE tree nodes.
	* c-omp.c (omp_directives): Classify metadirectives as C_OMP_DIR_META.
	(c_omp_expand_metadirective): New stub function.
	* c-pragma.c (omp_pragmas): Add entry for metadirective.
	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_METADIRECTIVE.

2021-11-10  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-21  Jakub Jelinek  <jakub@redhat.com>

	PR middle-end/64888
	* c-omp.c (c_omp_predefined_variable): Return true also for
	ubsan_create_data created artificial variables.

2021-10-27  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-27  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.c (c_omp_check_loop_iv_r): Don't clear 3rd bit for
	POINTER_PLUS_EXPR.
	(c_omp_check_nonrect_loop_iv): Handle POINTER_PLUS_EXPR.
	(c_omp_check_loop_iv): Set kind even if the iterator is non-integral.

2021-10-27  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-27  Jakub Jelinek  <jakub@redhat.com>

	PR c++/102854
	* c-common.h (c_omp_check_loop_iv_exprs): Add enum tree_code argument.
	* c-omp.c (c_omp_check_loop_iv_r): For trees other than decls,
	TREE_VEC, PLUS_EXPR, MINUS_EXPR, MULT_EXPR, POINTER_PLUS_EXPR or
	conversions temporarily clear the 3rd bit from d->kind while walking
	subtrees.
	(c_omp_check_loop_iv_exprs): Add CODE argument.  Or in 4 into data.kind
	if possibly non-rectangular.

2021-10-15  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-omp.c (c_omp_check_context_selector): Rename to
	omp_check_context_selector and move to omp-general.c.
	(c_omp_mark_declare_variant): Rename to omp_mark_declare_variant and
	move to omp-general.c.

2021-10-12  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-12  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.c (c_finish_omp_atomic): Use
	clear_padding_type_may_have_padding_p.

2021-10-06  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-06  Jakub Jelinek  <jakub@redhat.com>

	PR tree-optimization/102571
	* c-omp.c (c_finish_omp_atomic): Optimize the case where type has
	padding, but the non-padding bits are contiguous set of bytes
	by adjusting the memcmp call arguments instead of emitting
	__builtin_clear_padding and then comparing all the type's bytes.

2021-10-01  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-10-01  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.c (c_omp_split_clauses): Also copy
	OMP_CLAUSE_ORDER_REPRODUCIBLE.

2021-09-22  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-09-22  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.c (c_omp_split_clauses): Copy over OMP_CLAUSE_ALLOCATE_ALIGN.

2021-09-20  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-09-18  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.c (c_omp_split_clauses): Split order clause also to
	distribute construct.  Copy over OMP_CLAUSE_ORDER_UNCONSTRAINED.

2021-09-17  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-09-17  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.c (c_finish_omp_atomic): Avoid creating
	TARGET_EXPR if test is true, use create_tmp_var_raw instead of
	create_tmp_var and add a zero initializer to TARGET_EXPRs that
	had NULL initializer.  When omitting operands after v = x,
	use type of v rather than type of x.  Fix type of vtmp
	TARGET_EXPR.

2021-09-13  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-09-10  Jakub Jelinek  <jakub@redhat.com>
	* c-common.h (c_finish_omp_atomic): Add r and weak arguments.
	* c-omp.c: Include gimple-fold.h.
	(c_finish_omp_atomic): Add r and weak arguments.  Add support for
	OpenMP 5.1 atomics.

2021-08-20  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-20  Jakub Jelinek  <jakub@redhat.com>

	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_ERROR.
	* c-pragma.c (omp_pragmas): Add error directive.
	* c-omp.c (omp_directives): Uncomment error directive entry.

2021-08-18  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-18  Jakub Jelinek  <jakub@redhat.com>

	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_NOTHING.
	* c-pragma.c (omp_pragmas): Add nothing directive.
	* c-omp.c (omp_directives): Uncomment nothing directive entry.

2021-08-17  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-17  Jakub Jelinek  <jakub@redhat.com>

	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_SCOPE.
	* c-pragma.c (omp_pragmas): Add scope construct.
	* c-omp.c (omp_directives): Uncomment scope directive entry.

2021-08-16  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-08-12  Jakub Jelinek  <jakub@redhat.com>

	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_MASKED.
	(enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_FILTER.
	* c-pragma.c (omp_pragmas_simd): Add masked construct.
	* c-common.h (enum c_omp_clause_split): Add C_OMP_CLAUSE_SPLIT_MASKED
	enumerator.
	(c_finish_omp_masked): Declare.
	* c-omp.c (c_finish_omp_masked): New function.
	(c_omp_split_clauses): Handle combined masked constructs.

2021-07-23  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-23  Jakub Jelinek  <jakub@redhat.com>

	* c-lex.c (c_common_has_attribute): Call canonicalize_attr_name also
	on attr_id.  Return 1 for omp::directive or omp::sequence in C++11
	and later.

2021-07-23  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-23  Jakub Jelinek  <jakub@redhat.com>

	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP__START_ and
	PRAGMA_OMP__LAST_ enumerators.

2021-07-19  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-07-02  Jakub Jelinek  <jakub@redhat.com>

	* c-common.h (enum c_omp_directive_kind): New enum.
	(struct c_omp_directive): New type.
	(c_omp_categorize_directive): Declare.
	* c-omp.c (omp_directives): New variable.
	(c_omp_categorize_directive): New function.

2021-05-28  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-28  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.c (c_omp_split_clauses): For reduction clause if combined with
	target add a map tofrom clause with OMP_CLAUSE_MAP_IMPLICIT.

2021-05-28  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-28  Tobias Burnus  <tobias@codesourcery.com>

	* c-pragma.h (enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_AFFINITY.

2021-05-25  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-25  Jakub Jelinek  <jakub@redhat.com>

	PR middle-end/99928
	* c-omp.c (c_omp_split_clauses): Copy reduction to teams when teams is
	combined with simd and not with taskloop or for.

2021-05-23  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-21  Jakub Jelinek  <jakub@redhat.com>

	PR middle-end/99928
	* c-omp.c (c_omp_split_clauses): Set OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT
	on firstprivate clause copy going to target construct, and for
	target simd set also OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET bit.

2021-05-23  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2021-05-21  Jakub Jelinek  <jakub@redhat.com>
2021-04-30  Kwok Cheung Yeung  <kcy@codesourcery.com>

	Backport from mainline
	2021-04-23  Thomas Schwinge  <thomas@codesourcery.com>

	* c.opt (Wopenacc-parallelism): New.

2020-08-30  Sandra Loosemore  <sandra@codesourcery.com>

	* c-omp.c (end_test_ok_for_annotation_r): New.
	(end_test_ok_for_annotation): New.
	(check_and_annotate_for_loop): Use the new helper function.

2020-08-30  Sandra Loosemore  <sandra@codesourcery.com>

	* c-omp.c (annotate_for_loop): Move initializer processing...
	(check_and_annotate_for_loop): ... to here.  Allow the loop
	variable as either operand to the condition.

2020-08-22  Sandra Loosemore  <sandra@codesourcery.com>

	Allow annotation of loops containing calls to builtins in
	kernels regions.

	* c-omp.c (annotate_loops_in_kernels_regions): Test for
	calls to builtins.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Annotate inner loops in "acc kernels loop" directives (C/C++).

	* c-omp.c (annotate_loops_in_kernels_regions): Process inner
	loops in combined "acc kernels loop" directives.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>

	* c-common.h (c_oacc_annotate_loops_in_kernels_regions): Declare.
	* c-omp.c: Include tree-iterator.h
	(enum annotation_state): New.
	(struct annotation_info): New.
	(do_not_annotate_loop): New.
	(do_not_annotate_loop_nest): New.
	(annotation_error): New.
	(c_finish_omp_for_internal): Split from c_finish_omp_for.  Use
	annotation_error function.  Code refactoring to avoid destructive
	changes that cannot be undone in case of error.
	(is_local_var): New.
	(lang_specific_unwrap_initializer): New.
	(annotate_for_loop): New.
	(check_and_annotate_for_loop): New.
	(annotate_loops_in_kernels_regions): New.
	(c_oacc_annotate_loops_in_kernels_regions): New.
	* c.opt (Wopenacc-kernels-annotate-loops): New.
	(fopenacc-kernels-annotate-loops): New.

2019-01-09  Julian Brown  <julian@codesourcery.com>

	* c-cppbuiltin.c (c_cpp_builtins): Update _OPENACC define to 201711.

2018-10-02  Thomas Schwinge  <thomas@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>

	* c-pragma.h (pragma_omp_clause): Add PRAGMA_OACC_CLAUSE_NOHST.
